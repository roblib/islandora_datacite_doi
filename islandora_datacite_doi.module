<?php

/**
 * @file
 * Module to supply an api for creating Datacite DOIs.
 */

/**
 * Implements hook_menu().
 */
function islandora_datacite_doi_menu() {
  $items = array();

  $items['admin/islandora/islandora_datacite_doi'] = array(
    'title' => 'Islandora Datacite DOI settings',
    'description' => 'Configure settings for the Islandora Datacite DOI module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_datacite_doi_admin_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/admin.form.inc',
  );

  return $items;
}

/**
 * Conveinence method to register and mint a doi as well as update the source metadata stream with the DOI.
 * @code
 *  function hook_islandora_object_ingested(AbstractObject $object) {
 *    $test = islandora_datacite_doi_mint_doi($object, 'MODS');
 *    if($test < 0){
 *      drupal_set_message(t('Datacite DOI error, check watchdog logs for more information.'),'warning');
 *     }
 *   }
 * @endcode
 * @param string $object
 *   An Islandora AbstractObject
 * @param string $dsid
 *   The dsid used to retrieve metadata
 * @param string $type
 *   The type currently only support DDI but hope to add MODS
 * @return int
 *   0 for success
 */
function islandora_datacite_doi_mint_doi($object, $dsid) {
  $return_value = 0;
  $xsl_filename = islandora_datacite_doi_get_xslt($dsid);
  if ($xsl_filename) {
    try {
      islandora_datacite_doi_mint($object, $dsid, $xsl_filename);
      } catch (Exception $e) {
      watchdog('islandora_datacite_doi', 'DOI Error for @object - @dsid, @error', array(
        '@object' => $object->id, '@dsid' => $dsid, '@error' => $e->getMessage()), WATCHDOG_ERROR);
      $return_value = -2;
      }
  }
  else {
    watchdog('islandora_datacite_doi', 'DOI Error for @object - @dsid, Unsupported type.', array(
      '@object' => $object->id, '@dsid' => $dsid), WATCHDOG_ERROR);
    $return_value = -1;
  }

  return $return_value;
}

/**
 * Retrieve a xslt associated with a datastream id.
 * 
 * The xslt should be in the modules xslt folder.
 * 
 * @param string $dsid
 *   The datastream id
 * @return string
 *   The filename of the xslt.
 */
function islandora_datacite_doi_get_xslt($dsid) {
  switch ($dsid) {
    case "DDI":
      $xsl_filename = 'ddi_3_2-datacite_3_1.xsl';
      break;

    case "MODS":
      $xsl_filename = 'MODS-to-Datacite_3_1.xsl';
      break;

    default :
      $xsl_filename = NULL;
  }
  return $xsl_filename;
}

/**
 * Attempts to update the datacite metadata registered with datacite.
 * 
 * @param AbstractObject $object
 *   The islandora object
 * @param string $dsid
 *   The objects dsid
 * @return int
 *   0 for success
 */
function islandora_datacite_doi_update_doi($object, $dsid) {
  $return_value = 0;
  $xsl_filename = islandora_datacite_doi_get_xslt($dsid);
  if ($xsl_filename) {
    try {
      $datacite = new DataciteDoi(variable_get('islandora_datacite_doi_prefix'), variable_get('islandora_datacite_doi_site'), $object->id, variable_get('islandora_datacite_doi_username'), variable_get('islandora_datacite_doi_password'));
      islandora_datacite_doi_register_doi($object, $dsid, $datacite, $xsl_filename);
      } catch (Exception $e) {
      watchdog('islandora_datacite_doi', 'DOI Update Error for @object - @dsid, @error', array(
        '@object' => $object->id, '@dsid' => $dsid, '@error' => $e->getMessage()), WATCHDOG_ERROR);
      $return_value = -2;
      }
  }
  else {
    watchdog('islandora_datacite_doi', 'DOI Update Error for @object - @dsid, Unsupported type.', array(
      '@object' => $object->id, '@dsid' => $dsid), WATCHDOG_ERROR);
    $return_value = -1;
  }
  return $return_value;
}

/**
 * Registers and mints a datacite DOI
 *
 * @param string $object
 *   An islandora AbstractObject
 * @param string $dsid
 *   The dsid that holds the DDI content
 * @param string $xslt_filename
 *   The xslt file to use.  The file must exist in this modules xslt directory.
 * @param bool update_datastream
 *   If true update the datastream, if false return the updated xml
 * @throws Exception
 *   if registration, minting or updating the xml fails
 *
 * @return string
 *   if update_datastream == FALSE return the updated xml as a string otherwise update the islandora datastream and return NULL.
 */
function islandora_datacite_doi_mint($object, $dsid, $xslt_filename, $update_datastream = TRUE) {
  module_load_include('inc', 'islandora_datacite_doi', 'includes/datacite_doi.inc');
  $datacite = new DataciteDoi(variable_get('islandora_datacite_doi_prefix'), variable_get('islandora_datacite_doi_site'), $object->id, variable_get('islandora_datacite_doi_username'), variable_get('islandora_datacite_doi_password'));
  islandora_datacite_doi_register_doi($object, $dsid, $datacite, $xslt_filename);
  islandora_datacite_doi_send_doi($datacite);
  $new_metadata = $datacite->updateMetaData($datacite->getDoi(), $object[$dsid]->content, $dsid);
  if ($new_metadata === -1) {
    throw new Exception("Failed to add DOI to DDI xml");
  }
  if(update_datastream) {
    // We've updated the doi in the ddi so send it back to Fedora.
    $object[$dsid]->setContentFromString($new_metadata);
  } else {
    return $new_metadata;
  }
}

/**
 * Send the url and doi to Datacite.
 * 
 * @param string pid
 * @param DataciteDoi $datacite
 * @throws Exception
 */
function islandora_datacite_doi_send_doi($datacite) {
  $url = url("islandora/object/$datacite->pid", array(
    'language' => (object) array('language' => FALSE),
    'absolute' => TRUE,
    'https' => variable_get('islandora_datacite_doi_use_ssl', FALSE),
  ));
  $response = $datacite->sendDoiToDatacite($url);
  if (empty($response->code) || $response->code != '201') {
    throw new Exception("Failed to mint DOI for " . $datacite->getDOI() . ", Error sending DOI to datacite, $response->status_message");
  }
}

/**
 * Register datacite xml as metadata.
 *
 * We need to register a DOI with metadata before we can mint it.
 *
 * @param object $object
 *   An Islandora object
 * @param string $dsid
 *   The dsid containing the metadata to crosswalk.  
 * @param object $datacite
 *   A DataciteDoi object
 * @param string $xslt_filename
 *   The xslt file to use, it must exist in this modules xslt directory.
 *
 * @throws Exception
 *   if there are errors transforming xml or communicating with Datacite
 */
function islandora_datacite_doi_register_doi($object, $dsid, $datacite, $xslt_filename) {
  $doi = $datacite->getDoi();
  $datacite_xml = $datacite->transformMetadataToDacite($object[$dsid]->content, $doi, $xslt_filename);
  if (empty($datacite_xml)) {
    throw new Exception('Error transforming DDI to Datacite xml for object ' . $object->id);
  }
  $response = $datacite->sendXmlToDatacite($datacite_xml);
  if (empty($response->code) || $response->code != '201') {
    throw new Exception("Failed to register datacite xml with $doi error connecting to datacite, $response->status_message");
  }
}

/**
 * Make a DOI inactive on Datacite
 * @param string $pid
 *   An islandora object pid
 * @throws Exception
 */
function islandora_datacite_doi_delete($pid) {
  $datacite = new DataciteDoi(variable_get('islandora_datacite_doi_prefix'), variable_get('islandora_datacite_doi_site'), $pid, variable_get('islandora_datacite_doi_username'), variable_get('islandora_datacite_doi_password'));
  $response = $datacite->deleteDataciteDoi();
  if (empty($response->code) || $response->code != '200') {
    throw new Exception("Failed to set doi inactive, It is possible this object $pid did not have a doi, $response->status_message");
  }
}
